/**************************************************************************************************
 * Copyright (c) 2024 Calypso Networks Association https://calypsonet.org/                        *
 *                                                                                                *
 * This program and the accompanying materials are made available under the                       *
 * terms of the MIT License which is available at https://opensource.org/licenses/MIT.            *
 *                                                                                                *
 * SPDX-License-Identifier: MIT                                                                   *
 **************************************************************************************************/

#pragma once

#include <cstdint>
#include <ctime>
#include <memory>
#include <vector>

namespace keypop {
namespace calypso {
namespace crypto {
namespace legacysam {
namespace transaction {

/**
 * Contains the input/output data of the {@link
 * FreeTransactionManager#prepareComputeCardCertificate(LegacyCardCertificateComputationData)}
 * method.
 *
 * @since 0.5.0
 */
class LegacyCardCertificateComputationData {
public:
    /**
     * Sets the public key of the card, provided as a 64-byte array.
     *
     * <p>This key is expected to be on the <strong>secp256r1</strong> elliptic curve. It will be
     * used for the verification of card signatures.
     *
     * @param cardPublicKey The 64-byte array representing the public key on the
     *        <strong>secp256r1</strong> curve.
     * @return The current instance.
     * @throw IllegalArgumentException If the provided key is null or out of range.
     * @since 0.5.0
     */
    virtual LegacyCardCertificateComputationData&
    setCardPublicKey(const std::vector<uint8_t>& cardPublicKey)
        = 0;

    /**
     * Sets the start date of the validity period of the certificate's public key.
     *
     * <p>The start date is optional. If it is not defined, the certificate is not subject to a
     * start date constraint.
     *
     * @param startDate The start date.
     * @return The current instance.
     * @throw IllegalArgumentException If date is null.
     * @since 0.5.0
     */
    virtual LegacyCardCertificateComputationData& setStartDate(std::shared_ptr<tm> startDate) = 0;

    /**
     * Sets the end date of the validity period of the certificate's public key.
     *
     * <p>The end date is optional. If it is not defined, the certificate is not subject to an end
     * date constraint.
     *
     * @param endDate The end date.
     * @return The current instance.
     * @throw IllegalArgumentException If date is null.
     * @since 0.5.0
     */
    virtual LegacyCardCertificateComputationData& setEndDate(std::shared_ptr<tm> endDate) = 0;

    /**
     * Sets the AID of the autonomous PKI application of the target card.
     *
     * <p>The <b>aid</b> field cannot contain only zero bytes.
     *
     * @param aid The AID value as a 5 to 16 bytes byte array. Must not contain only zero bytes.
     * @return The current instance.
     * @throw IllegalArgumentException If the provided AID is null, out of range, or contains only
     *        zero bytes.
     * @since 0.5.0
     */
    virtual LegacyCardCertificateComputationData setCardAid(const std::vector<uint8_t>& aid) = 0;

    /**
     * Sets the serial number of the card for which the certificate is being generated.
     *
     * @param serialNumber The serial number of the card as an 8-byte byte array.
     * @return The current instance.
     * @throw IllegalArgumentException If the provided argument is null or out of range.
     * @since 0.5.0
     */
    virtual LegacyCardCertificateComputationData
    setCardSerialNumber(const std::vector<uint8_t>& serialNumber)
        = 0;

    /**
     * Sets the startup info of the card for which the certificate is being generated.
     *
     * @param startupInfo The 7-byte byte array representing the startup info for the card
     *     certificate.
     * @return The current instance.
     * @throw IllegalArgumentException If the provided argument is null or out of range.
     * @since 0.5.0
     */
    virtual LegacyCardCertificateComputationData&
    setCardStartupInfo(const std::vector<uint8_t>& startupInfo);

    /**
     * Returns the certificate generated by the SAM after the execution of the "PSO Compute
     * Certificate" command.
     *
     * @return A 316-byte byte array or null if the computation has not been performed.
     * @since 0.5.0
     */
    virtual const std::vector<uint8_t>& getCertificate() = 0;
};

} /* namespace transaction */
} /* namespace legacysam */
} /* namespace crypto */
} /* namespace calypso */
} /* namespace keypop */
